apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'


configurations {
    optional
    compile.extendsFrom optional
}

def siteUrl = project.websiteUrl
def gitUrl = project.vcsUrl
def libName = project.name

group = project.groupId
version = project.versionName

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']

    pkg {
        repo = "maven"  //发布到Bintray的maven库
        name = libName  //发布到Bintray上的项目名字
        desc = project.desc
        publicDownloadNumbers = true
        websiteUrl = siteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
        //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
    }
}
configurations {
    optional
    compile.extendsFrom optional
}



task androidJavadoc(type: Javadoc/*, dependsOn: assembleDebug*/) {
    source += files(android.sourceSets.main.java.srcDirs)
    failOnError false
    // This task will try to compile *everything* it finds in the above directory and
    // will choke on text files it doesn't understand.
    exclude '**/BUCK'
    exclude '**/*.md'
}

task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    classifier = 'javadoc'
    from androidJavadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equalsIgnoreCase("debug")) {
        return; // Skip debug builds.
    }

    println "---------------------- " + "javadoc${variant.name.capitalize()}"

    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source += files(android.sourceSets.main.java.srcDirs)

        classpath += files(it.classpath.files)
        exclude '**/internal/**'
        failOnError false
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

artifacts {
    archives androidJavadocJar
    archives androidSourcesJar
}

task jcenter << {
    println "Release ${version}"
}

jcenter.dependsOn(install)
jcenter.dependsOn(bintrayUpload)