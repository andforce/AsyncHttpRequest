/**
 * maven 插件相关
 */
apply plugin: 'com.github.dcendents.android-maven'

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging libraryPackaging
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDesc
                url websiteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection websiteUrl
                    developerConnection websiteUrl
                    url websiteUrl

                }
            }
        }
    }
}

if (project.hasProperty("android")) {
    // Android libraries

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
    android.libraryVariants.all { variant ->
        //println variant.javaCompile.classpath.files

        if (variant.name == 'release') {
            //我们只需 release 的 javadoc
            println(">>>>>>>>>>>>>>>" + JavaVersion.current())

            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {

                title "API Documentation (${project.android.defaultConfig.versionName})"
                group "ApiDoc"
                description "Generates Javadoc for $variant.name."

                ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
                source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

                doFirst {
                    classpath = project.files(variant.javaCompileProvider.get().classpath.files,
                            project.android.getBootClasspath())
                }

                options {
                    encoding "utf-8"
                }

                String javaDocsLink = String.format("https://docs.oracle.com/%sjava/javase/%s/docs/api/",
                        (Integer.valueOf(JavaVersion.current().getMajorVersion()) <= 10) ? "" : "en/", JavaVersion.current())
                options.links(javaDocsLink)

                if (JavaVersion.current().isJava8Compatible()) {
                    options.addStringOption('Xdoclint:none', '-quiet')
                }

                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
            task("javadoc${variant.name.capitalize()}Jar", type: Jar,
                    dependsOn: "generate${variant.name.capitalize()}Javadoc") {
                from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            }
            artifacts {
                archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
                archives sourcesJar
            }
        }
    }
} else {
    println(">>>>" + classpath + " " + getMajorVersion)
    // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

/**
 * bintray上传
 */
apply plugin: 'com.jfrog.bintray'

def siteUrl = project.websiteUrl
def gitUrl = project.vcsUrl
def libName = project.name

group = project.publishedGroupId
version = project.versionName

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']

    pkg {
        repo = project.bintrayRepo  //发布到Bintray的maven库
        name = libName  //发布到Bintray上的项目名字
        desc = project.libraryDesc
        override = true
        publish = true
        publicDownloadNumbers = true
        websiteUrl = siteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = gitUrl
        licenses = [project.licenseName]
        publish = true
        //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        version {
            desc = project.libraryVersionDesc
            released = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

/**
 * 合并打包和上传
 * 执行./gradlew jcenter
 * 自定完胜打包和上传
 */
task jcenter {
    doLast {
        println "Release ${version}"
    }
}

jcenter.dependsOn(install)
jcenter.dependsOn(bintrayUpload)